name: CD

on:
  push:
    branches: [ main ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  deploy-staging:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt

    - name: Run tests
      run: |
        pytest --cov=src --cov-report=xml

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to Container Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push Docker image (staging)
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:staging
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Deploy to staging environment
      run: |
        echo "Deploying to staging environment..."
        echo "This would typically involve:"
        echo "1. Updating Kubernetes manifests"
        echo "2. Applying changes to staging cluster"
        echo "3. Running health checks"
        echo "4. Notifying team of deployment"

  deploy-production:
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    needs: deploy-staging
    
    environment:
      name: production
      url: https://mlops-spine-disease.example.com

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt

    - name: Run full test suite
      run: |
        pytest --cov=src --cov-report=xml

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to Container Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha

    - name: Build and push Docker image (production)
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        echo "Release version: ${{ github.event.release.tag_name }}"
        echo "This would typically involve:"
        echo "1. Updating production Kubernetes manifests"
        echo "2. Applying changes to production cluster"
        echo "3. Running health checks"
        echo "4. Monitoring deployment"
        echo "5. Rolling back if issues detected"

    - name: Run post-deployment tests
      run: |
        echo "Running post-deployment tests..."
        echo "This would typically involve:"
        echo "1. Health check endpoints"
        echo "2. Smoke tests"
        echo "3. Performance tests"
        echo "4. Integration tests"

    - name: Notify deployment success
      if: success()
      run: |
        echo "Production deployment successful!"
        echo "This would typically involve:"
        echo "1. Sending Slack notification"
        echo "2. Updating deployment dashboard"
        echo "3. Creating deployment report"

    - name: Notify deployment failure
      if: failure()
      run: |
        echo "Production deployment failed!"
        echo "This would typically involve:"
        echo "1. Sending alert to on-call team"
        echo "2. Initiating rollback procedure"
        echo "3. Creating incident report"

  security-scan:
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]

    steps:
    - uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  performance-test:
    runs-on: ubuntu-latest
    needs: deploy-production
    if: github.event_name == 'release'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt

    - name: Run performance tests
      run: |
        echo "Running performance tests..."
        echo "This would typically involve:"
        echo "1. Load testing with tools like Locust"
        echo "2. Stress testing"
        echo "3. Performance benchmarking"
        echo "4. Resource usage monitoring"

    - name: Generate performance report
      run: |
        echo "Generating performance report..."
        echo "This would typically involve:"
        echo "1. Collecting metrics"
        echo "2. Creating performance dashboard"
        echo "3. Comparing with baseline"
        echo "4. Alerting if performance degrades" 